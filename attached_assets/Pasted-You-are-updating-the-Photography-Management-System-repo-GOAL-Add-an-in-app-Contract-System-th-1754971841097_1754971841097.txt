You are updating the “Photography Management System” repo.

GOAL
Add an in-app Contract System that:
- Seeds 5 editable templates (portrait, wedding, event, commercial, model release).
- Auto-fills merge fields from session/client.
- Supports in-browser e-signature (touch/mouse).
- Generates a flattened, read-only PDF.
- Uploads PDF to Cloudflare R2 (/contracts/).
- Provides share options that rely on the user’s own device/apps:
  * NO SendGrid, NO Twilio, NO server-side email/SMS.
  * Offer “Open Email”, “Open SMS”, “Share…”, and “Copy Link” actions.
- Tracks status (Draft, Sent, Viewed, Signed).
- IMPORTANT: Do NOT remove/replace any existing buttons/flows.
  Instead, ADD a new button labeled “Contracts” to each session card that opens this system.

TECH
Frontend: /app/contracts.html, /app/sign.html (+ JS modules)
Backend: Node/Express routes
Signing: szimek/signature_pad
PDF: pdf-lib (puppeteer or html-pdf acceptable for HTML→PDF capture)
Storage: existing Cloudflare R2 helper
Auth: existing client portal auth/session model

DATA MODEL (create/extend)
Collection: contracts
- id: string
- sessionId: string
- clientId: string
- templateKey: "portrait"|"wedding"|"event"|"commercial"|"model_release"
- title: string
- html: string              // resolved HTML at send time
- status: "draft"|"sent"|"viewed"|"signed"
- createdAt: number
- updatedAt: number
- sentAt?: number
- viewedAt?: number
- signedAt?: number
- signerIp?: string
- signUrl?: string          // tokenized client sign URL
- pdfUrl?: string           // R2 URL to signed PDF
- pdfHash?: string          // sha256 of final PDF
- timeline?: Array<{at:number, action:string, by:string}>
- metadata?: object

Collection: contract_templates (seed with templates below)
- key: string
- name: string
- defaultTitle: string
- sections: Array<{heading?:string, bodyHtml:string}>
- createdAt: number
- updatedAt: number

MERGE FIELDS (auto-fill from session + client)
{photographerName}
{photographerEmail}
{studioName}
{clientName}
{clientEmail}
{contractDate}
{eventDate}
{eventLocation}
{ceremonyLocation}
{receptionLocation}
{coverageHours}
{packageName}
{deliverableCount}
{totalPrice}
{depositAmount}
{balanceDueDate}
{deliveryDays}
{mealBreakTime}
{eventType}
{shootScope}
{licenseType}
{usageTerm}
{deliveryDate}
{modelName}
{shootDate}
{shootLocation}
{rescheduleNoticeDays}

FRONTEND — /app/contracts.html
Layout:
- Left panel: list with filters (Draft/Sent/Signed).
- Right panel: editor/viewer pane.
- Controls: [Use Template ▼] [Send for Signature] [Copy Link] [Open Email] [Open SMS] [Share…] [Download PDF] [Resend] [Delete Draft].
Behavior:
- If URL has ?sessionId=XYZ:
  - If a contract already exists for that session with status in ["draft","sent","signed"], open it.
  - Else create a new draft and preselect template per “Template selection”.
- WYSIWYG: contenteditable (or Quill/Tiptap). Preserve {mergeFields} until “Send for Signature”.
- “Send for Signature”:
  1) Resolve {mergeFields} using session+client+studio.
  2) Save resolved HTML to contract.html (on record).
  3) Create a tokenized sign link: /app/sign.html?contractId=...&k=<secureToken>
  4) Update status="sent", sentAt=now, signUrl saved.
  5) Show share UI with the new link.

Share UI (NO email/SMS services; device-based only):
- Copy Link: navigator.clipboard.writeText(signUrl).
- Open Email: open a mailto with subject/body prefilled including signUrl.
  Example:
    const subject = encodeURIComponent(`Please Sign Your Contract – {studioName}`);
    const body = encodeURIComponent(
      `Hi {clientName},\n\nHere’s your contract link:\n${signUrl}\n\nThank you!\n{studioName}`
    );
    window.location.href = `mailto:${clientEmail}?subject=${subject}&body=${body}`;
- Open SMS (mobile-capable only):
  Detect mobile via simple UA check. Fallback to Copy Link if not mobile.
  Example:
    const smsBody = encodeURIComponent(`Please sign your contract: ${signUrl}`);
    // iOS uses sms:&body= / Android uses sms:?body=
    const smsHref = /iPhone|iPad|iPod/.test(navigator.userAgent)
      ? `sms:&body=${smsBody}`
      : `sms:?body=${smsBody}`;
    window.location.href = smsHref;
- Share… (Web Share API if available):
    if (navigator.share) { navigator.share({ title: 'Sign Contract', text: 'Please sign your contract', url: signUrl }); }

FRONTEND — /app/sign.html
- Loads read-only resolved contract HTML.
- SignaturePad canvas + [Clear] + [Sign & Finish].
- On submit:
  POST /api/contracts/:id/sign { signatureDataUrl, signerIp }.
- After success:
  Show “Signed!” screen with share options for the final PDF link (same device-based approach as above).
  Options: [Copy Link] [Open Email] [Open SMS] [Share…] + [View/Download PDF].

SESSION CARD INTEGRATION (ADD NEW BUTTON; DO NOT DELETE EXISTING)
- Find the session card template/render.
- Keep ALL existing buttons.
- Append a new button labeled “Contracts” (.btn-contracts).
- Click -> `/app/contracts.html?sessionId=<SESSION_ID>`
Example JS (non-destructive):
function appendContractsButtonToCard(cardEl, sessionId) {
  if (cardEl.querySelector('.btn-contracts')) return;
  const btn = document.createElement('button');
  btn.type = 'button';
  btn.className = 'btn btn-secondary btn-contracts';
  btn.textContent = 'Contracts';
  btn.addEventListener('click', (e) => {
    e.preventDefault();
    window.location.href = `/app/contracts.html?sessionId=${encodeURIComponent(sessionId)}`;
  });
  (cardEl.querySelector('.card-actions') || cardEl).appendChild(btn);
}
document.querySelectorAll('[data-session-id]').forEach(card => {
  appendContractsButtonToCard(card, card.getAttribute('data-session-id'));
});
document.addEventListener('click', (e) => {
  const el = e.target.closest('.btn-contracts');
  if (!el) return;
  const card = el.closest('[data-session-id]');
  const sessionId = card?.getAttribute('data-session-id');
  if (sessionId) window.location.href = `/app/contracts.html?sessionId=${encodeURIComponent(sessionId)}`;
});

TEMPLATE SELECTION (auto when arriving via sessionId)
if session.type === "wedding" -> "wedding"
else if session.type in ("branding","commercial") -> "commercial"
else if session.type === "event" -> "event"
else -> "portrait"

BACKEND ROUTES
POST /api/contracts/create
  body: { sessionId, clientId, templateKey, title? }
  - Load template.sections, join to editable HTML (with merge fields intact).
  - status="draft".
  - return record.

POST /api/contracts/send
  body: { contractId }
  - Fetch contract + session + client + studio.
  - Resolve {mergeFields} -> save to contract.html.
  - Generate secure token (random 32 bytes base64url).
  - signUrl = `/app/sign.html?contractId=${id}&k=${token}`
  - Persist token server-side with expiry (7 days).
  - status="sent", sentAt=now; timeline push.
  - Return { signUrl } (NO email/SMS sent by server).

POST /api/contracts/:id/viewed
  - Mark viewedAt=now, status="viewed" if previously "sent".

POST /api/contracts/:id/sign
  body: { signatureDataUrl, signerIp }
  - Verify token still valid.
  - Load saved contract.html.
  - Render to PDF (server-side). Flatten, read-only.
  - Overlay signature image on last page; add audit footer:
    “Signed electronically by {clientName} on {ISO} from IP {signerIp}.”
  - Compute sha256 -> pdfHash.
  - Upload to R2 at `contracts/contract-{clientId}-{sessionId}-{timestamp}.pdf` (contentType=application/pdf).
  - Save pdfUrl, status="signed", signedAt=now, signerIp.
  - Return { pdfUrl } (client UI will show device-based share options).

GET /api/contracts/:id/pdf
  - Authz check (owner or client).
  - Stream or redirect to R2 signed URL.

SECURITY
- Tokenized sign links expire in 7 days (configurable).
- PDFs are flattened; no editable fields.
- Store signedAt (UTC), signerIp, pdfHash.
- Rate-limit sign/view endpoints minimally.

R2 STORAGE
- Use existing credentials/helper.
- Private objects; create short-lived signed URL for viewing/downloading.

EMAIL/SMS DEVICE INTEGRATION — IMPLEMENTATION NOTES
- Mailto:
  `mailto:${clientEmail}?subject=${subject}&body=${body}`
  Include signUrl/pdfUrl and session info in body. No attachments via mailto; provide links.
- SMS:
  `sms:?body=${encoded}` (Android) or `sms:&body=${encoded}` (iOS).
  Include signUrl/pdfUrl; no attachments.
- Web Share API:
  if (navigator.share) { navigator.share({ title, text, url }); }
- Always provide a visible “Copy Link” fallback.

SEED CONTRACT TEMPLATES (insert into contract_templates at build/deploy)
[
  {
    "key": "portrait",
    "name": "Portrait Photography Contract",
    "defaultTitle": "Portrait Photography Agreement",
    "sections": [
      { "bodyHtml": "<h2>PORTRAIT PHOTOGRAPHY AGREEMENT</h2><p>This Portrait Photography Agreement (“Agreement”) is made between {photographerName} (“Photographer”) and {clientName} (“Client”) as of {contractDate}.</p>" },
      { "bodyHtml": "<h3>1. EVENT DETAILS</h3><p>Date: {eventDate}<br>Location: {eventLocation}<br>Package: {packageName}<br>Deliverables: {deliverableCount} edited images in online gallery.</p>" },
      { "bodyHtml": "<h3>2. FEES & PAYMENT</h3><p>Total Fee: ${totalPrice}<br>Retainer: ${depositAmount} due at signing (non-refundable). Balance due on {balanceDueDate}.</p>" },
      { "bodyHtml": "<h3>3. CANCELLATION & RESCHEDULING</h3><p>Client may reschedule once without fee if notice is given at least {rescheduleNoticeDays} days in advance. Retainer is non-refundable for cancellations.</p>" },
      { "bodyHtml": "<h3>4. COPYRIGHT & USAGE</h3><p>Photographer retains full copyright to all images. Client is granted personal, non-commercial usage rights.</p>" },
      { "bodyHtml": "<h3>5. LIABILITY</h3><p>Photographer is not liable for circumstances beyond control including weather, accidents, or equipment failure.</p>" },
      { "bodyHtml": "<h3>6. DELIVERY TIMELINE</h3><p>Gallery delivered within {deliveryDays} days of session date.</p>" },
      { "bodyHtml": "<p>Both parties acknowledge they have read and agree to the terms.</p><p>Signed: _____________________ (Photographer)<br>Signed: _____________________ (Client)<br>Date: _______________________</p>" }
    ]
  },
  {
    "key": "wedding",
    "name": "Wedding Photography Contract",
    "defaultTitle": "Wedding Photography Agreement",
    "sections": [
      { "bodyHtml": "<h2>WEDDING PHOTOGRAPHY AGREEMENT</h2><p>Entered on {contractDate} between {photographerName} (“Photographer”) and {clientName} (“Client”).</p>" },
      { "bodyHtml": "<h3>1. WEDDING DETAILS</h3><p>Date: {eventDate}<br>Ceremony: {ceremonyLocation}<br>Reception: {receptionLocation}<br>Coverage Hours: {coverageHours}</p>" },
      { "bodyHtml": "<h3>2. FEES</h3><p>Total Price: ${totalPrice}<br>Deposit: ${depositAmount} due at signing (non-refundable). Balance due {balanceDueDate}.</p>" },
      { "bodyHtml": "<h3>3. SCHEDULE & COOPERATION</h3><p>Client will provide a timeline and a day-of contact. Photographer is not responsible for missed moments due to delays or uncooperative subjects.</p>" },
      { "bodyHtml": "<h3>4. COPYRIGHT & LICENSE</h3><p>Photographer owns copyright. Client receives a personal-use license.</p>" },
      { "bodyHtml": "<h3>5. MEALS & BREAKS</h3><p>Photographer(s) to receive {mealBreakTime} meal break for coverage exceeding 5 hours.</p>" },
      { "bodyHtml": "<h3>6. LIABILITY & FORCE MAJEURE</h3><p>Photographer is not liable for failure to perform due to events beyond control.</p>" },
      { "bodyHtml": "<h3>7. DELIVERY</h3><p>Final images delivered within {deliveryDays} days.</p>" }
    ]
  },
  {
    "key": "event",
    "name": "Event Photography Contract",
    "defaultTitle": "Event Photography Agreement",
    "sections": [
      { "bodyHtml": "<h2>EVENT PHOTOGRAPHY AGREEMENT</h2><p>Between {photographerName} and {clientName}, effective {contractDate}.</p>" },
      { "bodyHtml": "<h3>1. EVENT INFO</h3><p>Date: {eventDate}<br>Location: {eventLocation}<br>Type: {eventType}<br>Coverage Hours: {coverageHours}</p>" },
      { "bodyHtml": "<h3>2. PAYMENT</h3><p>Total: ${totalPrice}<br>Deposit: ${depositAmount} due at signing. Balance due {balanceDueDate}.</p>" },
      { "bodyHtml": "<h3>3. COPYRIGHT</h3><p>Photographer retains copyright. Client has license for event promotion and personal use.</p>" },
      { "bodyHtml": "<h3>4. RESCHEDULING & CANCELLATION</h3><p>At least {rescheduleNoticeDays} days notice required to reschedule. Retainer non-refundable.</p>" },
      { "bodyHtml": "<h3>5. DELIVERY</h3><p>Images delivered within {deliveryDays} days.</p>" }
    ]
  },
  {
    "key": "commercial",
    "name": "Commercial / Branding Contract",
    "defaultTitle": "Commercial Photography Agreement",
    "sections": [
      { "bodyHtml": "<h2>COMMERCIAL PHOTOGRAPHY AGREEMENT</h2><p>Between {photographerName} and {clientName} on {contractDate}.</p>" },
      { "bodyHtml": "<h3>1. PROJECT DETAILS</h3><p>Date: {eventDate}<br>Location: {eventLocation}<br>Scope: {shootScope}<br>Deliverables: {deliverableCount} images</p>" },
      { "bodyHtml": "<h3>2. USAGE RIGHTS</h3><p>Client is granted a {licenseType} license for {usageTerm} years. All other rights remain with Photographer.</p>" },
      { "bodyHtml": "<h3>3. PAYMENT</h3><p>Total: ${totalPrice}<br>Deposit: ${depositAmount} due at signing. Balance due {balanceDueDate}.</p>" },
      { "bodyHtml": "<h3>4. LIABILITY</h3><p>Photographer is not liable for consequential damages from image use.</p>" },
      { "bodyHtml": "<h3>5. DELIVERY</h3><p>Images delivered by {deliveryDate}.</p>" }
    ]
  },
  {
    "key": "model_release",
    "name": "Model Release",
    "defaultTitle": "Model Release",
    "sections": [
      { "bodyHtml": "<h2>MODEL RELEASE</h2><p>I, {modelName}, grant {photographerName} permission to use my likeness in photographs, videos, and other media taken on {shootDate} at {shootLocation}. I authorize editing, publication, distribution, and licensing of the images for commercial, promotional, or artistic purposes in any medium. I waive any right to royalties or compensation.</p>" },
      { "bodyHtml": "<p>Signed: __________________ (Model)<br>Date: ___________________</p>" }
    ]
  }
]

DONE CRITERIA
- Existing flows untouched; a NEW “Contracts” button appears on every session card.
- Clicking it opens /app/contracts.html scoped to that session.
- User can pick template, edit, and “Send for Signature”.
- App shows a tokenized sign link and device-based share options (Email, SMS, Share…, Copy).
- Client signs; app generates PDF, uploads to R2, records pdfUrl/pdfHash/signedAt/signerIp.
- After signing, app shows device-based share options for the PDF link.
- Photographer dashboard shows accurate status and supports viewing/downloading the PDF.
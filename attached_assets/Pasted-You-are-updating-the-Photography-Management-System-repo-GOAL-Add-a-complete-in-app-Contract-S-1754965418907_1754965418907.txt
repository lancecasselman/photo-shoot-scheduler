You are updating the “Photography Management System” repo.

GOAL
Add a complete in‑app Contract System with:
- Preloaded editable templates (5 types below).
- Merge fields auto-filled from session/client data.
- In-browser e‑signature (touch/mouse).
- Signed PDF generation.
- Store signed PDFs to Cloudflare R2 (/contracts/).
- Email signed copy to both client and photographer.
- Status tracking (Draft, Sent, Viewed, Signed).
- Link the existing “Contract” button on each session card to this system.

TECH STACK
Frontend: contracts.html (+ module scripts)
Backend: Node/Express routes
PDF: pdf-lib (or html-pdf fallback if SSR HTML→PDF is easier)
Signature: szimek/signature_pad
Email: existing SendGrid/Nodemailer helper
Storage: existing Cloudflare R2 helper
Auth: existing client portal auth

DATA MODEL (create or extend)
Collection: contracts
- id: string
- sessionId: string
- clientId: string
- templateKey: "portrait"|"wedding"|"event"|"commercial"|"model_release"
- title: string
- html: string              // editable HTML with merge fields resolved at send time
- status: "draft"|"sent"|"viewed"|"signed"
- createdAt: number
- updatedAt: number
- sentAt?: number
- viewedAt?: number
- signedAt?: number
- signerIp?: string
- pdfUrl?: string           // R2 URL
- pdfHash?: string          // sha256 of final PDF bytes
- timeline?: Array<{at:number, action:string, by:string}>
- metadata?: object         // misc

Collection: contract_templates  (seed with the 5 templates below)
- key: string               // "portrait", "wedding", etc
- name: string
- defaultTitle: string
- sections: Array<{heading?:string, bodyHtml:string}>
- createdAt: number
- updatedAt: number

MERGE FIELDS (auto-fill from session + client)
{photographerName}
{photographerEmail}
{studioName}
{clientName}
{clientEmail}
{contractDate}
{eventDate}
{eventLocation}
{ceremonyLocation}
{receptionLocation}
{coverageHours}
{packageName}
{deliverableCount}
{totalPrice}
{depositAmount}
{balanceDueDate}
{deliveryDays}
{mealBreakTime}
{eventType}
{shootScope}
{licenseType}
{usageTerm}
{deliveryDate}
{modelName}
{shootDate}
{shootLocation}
{rescheduleNoticeDays}

FRONTEND
Create /app/contracts.html with:
- Left: list (Draft/Sent/Signed) with filters
- Right: editor/viewer pane
- Buttons: [Use Template] [Send for Signature] [Download PDF] [Resend] [Delete Draft]
- WYSIWYG: contenteditable or tiptap/quill; preserve {mergeFields}
- “Send for Signature” opens modal to confirm populated fields; then POST /api/contracts/send
- “Sign” page: /app/sign.html?contractId=... loads rendered contract + SignaturePad canvas + “Clear” + “Sign & Finish”
- On successful sign:
  - generate PDF on server
  - upload to R2
  - mark status=signed
  - email both parties

SESSION CARD INTEGRATION (IMPORTANT)
Find the existing session cards list rendering file. Add a click handler to the existing “Contract” button.

Implementation:
- Each card has data-session-id. The “Contract” button has class .btn-contract (or current class).
- On click, navigate to `/app/contracts.html?sessionId=<id>`.
- On contracts.html load, if sessionId present:
  - Prefill a draft from “portrait” or if session.type === “wedding” use “wedding”, etc.
  - If a contract already exists for that session, open it instead of creating a new draft.

Example patch (JS):
document.addEventListener('click', (e) => {
  const btn = e.target.closest('.btn-contract');
  if (!btn) return;
  const card = btn.closest('[data-session-id]');
  if (!card) return;
  const sessionId = card.getAttribute('data-session-id');
  window.location.href = `/app/contracts.html?sessionId=${encodeURIComponent(sessionId)}`;
});

BACKEND ROUTES
POST /api/contracts/create
  body: { sessionId, clientId, templateKey, title? }
  - pull template by key
  - compose editable HTML by joining sections
  - create record status="draft"
  - return contract

POST /api/contracts/send
  body: { contractId }
  - fetch contract + session + client
  - resolve {mergeFields} from DB
  - save resolved HTML to contract.html
  - status="sent", sentAt=now, timeline push
  - generate secure token link for client portal: /app/sign.html?cid=<cid>&k=<token>&contractId=...
  - email client link + email photographer “sent” notice

GET /api/contracts/:id
  - return contract (authz check: owner or assigned client)

POST /api/contracts/:id/viewed
  - mark viewedAt and status="viewed" if currently "sent"

POST /api/contracts/:id/sign
  body: { signatureDataUrl, signerIp }
  Steps:
  - Load contract.html (resolved at send stage)
  - Server-side: embed signature PNG into the last page (pdf-lib) and append an audit footer with:
      “Signed electronically by {clientName} on {new Date().toISOString()} from IP {signerIp}.”
  - Generate PDF bytes
  - Compute sha256, save to contract.pdfHash
  - Upload PDF to R2 at path: `contracts/contract-{clientId}-{sessionId}-{timestamp}.pdf`
  - Save returned R2 URL as pdfUrl
  - Update status="signed", signedAt=now, signerIp=provided
  - Email PDF to client + photographer (attachments or link)
  - Return { pdfUrl }

GET /api/contracts/:id/pdf
  - streams/redirects to pdfUrl (authz required)

SECURITY / LEGAL MARKERS
- Store signedAt (UTC millis), signerIp, pdfHash.
- PDFs must be read-only (no form fields); embed signature as raster in the PDF.

PDF RENDERING
- Use pdf-lib:
  - Convert HTML → image (quick path: render with puppeteer to PNG then place; OR use html-pdf if available).
  - Overlay signature PNG at a fixed x,y on the final page.
  - Add small audit footer.

EMAILS
Subject for client: “Please Sign Your Contract – {studioName}”
Subject after signing: “Signed Contract: {clientName} – {eventDate}”
Include link to view/download. If attaching PDF, fetch from R2 first or attach the buffer pre-upload.

SEED CONTRACT TEMPLATES (insert into contract_templates at build/deploy)
[
  {
    "key": "portrait",
    "name": "Portrait Photography Contract",
    "defaultTitle": "Portrait Photography Agreement",
    "sections": [
      { "bodyHtml": "<h2>PORTRAIT PHOTOGRAPHY AGREEMENT</h2><p>This Portrait Photography Agreement (“Agreement”) is made between {photographerName} (“Photographer”) and {clientName} (“Client”) as of {contractDate}.</p>" },
      { "bodyHtml": "<h3>1. EVENT DETAILS</h3><p>Date: {eventDate}<br>Location: {eventLocation}<br>Package: {packageName}<br>Deliverables: {deliverableCount} edited images in online gallery.</p>" },
      { "bodyHtml": "<h3>2. FEES & PAYMENT</h3><p>Total Fee: ${totalPrice}<br>Retainer: ${depositAmount} due at signing (non-refundable). Balance due on {balanceDueDate}.</p>" },
      { "bodyHtml": "<h3>3. CANCELLATION & RESCHEDULING</h3><p>Client may reschedule once without fee if notice is given at least {rescheduleNoticeDays} days in advance. Retainer is non-refundable for cancellations.</p>" },
      { "bodyHtml": "<h3>4. COPYRIGHT & USAGE</h3><p>Photographer retains full copyright to all images. Client is granted personal, non-commercial usage rights.</p>" },
      { "bodyHtml": "<h3>5. LIABILITY</h3><p>Photographer is not liable for circumstances beyond control including weather, accidents, or equipment failure.</p>" },
      { "bodyHtml": "<h3>6. DELIVERY TIMELINE</h3><p>Gallery delivered within {deliveryDays} days of session date.</p>" },
      { "bodyHtml": "<p>Both parties acknowledge they have read and agree to the terms.</p><p>Signed: _____________________ (Photographer)<br>Signed: _____________________ (Client)<br>Date: _______________________</p>" }
    ]
  },
  {
    "key": "wedding",
    "name": "Wedding Photography Contract",
    "defaultTitle": "Wedding Photography Agreement",
    "sections": [
      { "bodyHtml": "<h2>WEDDING PHOTOGRAPHY AGREEMENT</h2><p>Entered on {contractDate} between {photographerName} (“Photographer”) and {clientName} (“Client”).</p>" },
      { "bodyHtml": "<h3>1. WEDDING DETAILS</h3><p>Date: {eventDate}<br>Ceremony: {ceremonyLocation}<br>Reception: {receptionLocation}<br>Coverage Hours: {coverageHours}</p>" },
      { "bodyHtml": "<h3>2. FEES</h3><p>Total Price: ${totalPrice}<br>Deposit: ${depositAmount} due at signing (non-refundable). Balance due {balanceDueDate}.</p>" },
      { "bodyHtml": "<h3>3. SCHEDULE & COOPERATION</h3><p>Client will provide a timeline and a day-of contact. Photographer is not responsible for missed moments due to delays or uncooperative subjects.</p>" },
      { "bodyHtml": "<h3>4. COPYRIGHT & LICENSE</h3><p>Photographer owns copyright. Client receives a personal-use license.</p>" },
      { "bodyHtml": "<h3>5. MEALS & BREAKS</h3><p>Photographer(s) to receive {mealBreakTime} meal break for coverage exceeding 5 hours.</p>" },
      { "bodyHtml": "<h3>6. LIABILITY & FORCE MAJEURE</h3><p>Photographer is not liable for failure to perform due to events beyond control.</p>" },
      { "bodyHtml": "<h3>7. DELIVERY</h3><p>Final images delivered within {deliveryDays} days.</p>" }
    ]
  },
  {
    "key": "event",
    "name": "Event Photography Contract",
    "defaultTitle": "Event Photography Agreement",
    "sections": [
      { "bodyHtml": "<h2>EVENT PHOTOGRAPHY AGREEMENT</h2><p>Between {photographerName} and {clientName}, effective {contractDate}.</p>" },
      { "bodyHtml": "<h3>1. EVENT INFO</h3><p>Date: {eventDate}<br>Location: {eventLocation}<br>Type: {eventType}<br>Coverage Hours: {coverageHours}</p>" },
      { "bodyHtml": "<h3>2. PAYMENT</h3><p>Total: ${totalPrice}<br>Deposit: ${depositAmount} due at signing. Balance due {balanceDueDate}.</p>" },
      { "bodyHtml": "<h3>3. COPYRIGHT</h3><p>Photographer retains copyright. Client has license for event promotion and personal use.</p>" },
      { "bodyHtml": "<h3>4. RESCHEDULING & CANCELLATION</h3><p>At least {rescheduleNoticeDays} days notice required to reschedule. Retainer non-refundable.</p>" },
      { "bodyHtml": "<h3>5. DELIVERY</h3><p>Images delivered within {deliveryDays} days.</p>" }
    ]
  },
  {
    "key": "commercial",
    "name": "Commercial / Branding Contract",
    "defaultTitle": "Commercial Photography Agreement",
    "sections": [
      { "bodyHtml": "<h2>COMMERCIAL PHOTOGRAPHY AGREEMENT</h2><p>Between {photographerName} and {clientName} on {contractDate}.</p>" },
      { "bodyHtml": "<h3>1. PROJECT DETAILS</h3><p>Date: {eventDate}<br>Location: {eventLocation}<br>Scope: {shootScope}<br>Deliverables: {deliverableCount} images</p>" },
      { "bodyHtml": "<h3>2. USAGE RIGHTS</h3><p>Client is granted a {licenseType} license for {usageTerm} years. All other rights remain with Photographer.</p>" },
      { "bodyHtml": "<h3>3. PAYMENT</h3><p>Total: ${totalPrice}<br>Deposit: ${depositAmount} due at signing. Balance due {balanceDueDate}.</p>" },
      { "bodyHtml": "<h3>4. LIABILITY</h3><p>Photographer is not liable for consequential damages from image use.</p>" },
      { "bodyHtml": "<h3>5. DELIVERY</h3><p>Images delivered by {deliveryDate}.</p>" }
    ]
  },
  {
    "key": "model_release",
    "name": "Model Release",
    "defaultTitle": "Model Release",
    "sections": [
      { "bodyHtml": "<h2>MODEL RELEASE</h2><p>I, {modelName}, grant {photographerName} permission to use my likeness in photographs, videos, and other media taken on {shootDate} at {shootLocation}. I authorize editing, publication, distribution, and licensing of the images for commercial, promotional, or artistic purposes in any medium. I waive any right to royalties or compensation.</p>" },
      { "bodyHtml": "<p>Signed: __________________ (Model)<br>Date: ___________________</p>" }
    ]
  }
]

UI WIRES
- On contracts.html, add a “Use Template” dropdown pre-populated from contract_templates.
- When sessionId is provided, preselect the logical template:
  if (session.type === "wedding") "wedding"
  else if (session.type === "branding" || session.isCommercial) "commercial"
  else if (session.type === "event") "event"
  else "portrait"

R2 STORAGE
- Put to: `contracts/contract-{clientId}-{sessionId}-{timestamp}.pdf`
- Ensure contentType=application/pdf and set appropriate ACL (private by default; signed URLs via backend).

DONE CRITERIA
- Clicking “Contract” on a session card opens contracts.html scoped to that session.
- User can pick template, edit, send.
- Client receives a sign link, signs, and both parties get the final PDF by email.
- Photographer dashboard shows accurate status and allows download.
- A signed PDF exists in R2 with stored pdfUrl + pdfHash + signerIp + signedAt.

Deliver all files changed/added with working imports and route registration.

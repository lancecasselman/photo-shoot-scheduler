# HIGH-LEVEL GOAL
Add a new ‚ÄúCommunity‚Äù section to my existing photo-management system.  
Think of it as a lightweight, Facebook-style forum focused on pose inspiration:

‚Ä¢ Photographers can post a single image per post (portrait or landscape) plus an optional caption.  
‚Ä¢ Posts are grouped by calendar month (e.g., ‚ÄúAugust 2025‚Äù).  
‚Ä¢ Each post shows: the image, poster name & avatar, caption, ‚ù§Ô∏è like button with live count, üí¨ comment button.  
‚Ä¢ When üí¨ is tapped, an inline drawer/overlay opens showing threaded comments (author, timestamp, text, delete-own).  
‚Ä¢ Real-time updates (likes & comments update instantly for all viewers).  
‚Ä¢ Only authenticated users can post, like, or comment; public read access is OK.  
‚Ä¢ Soft-delete support (mark as isDeleted = true instead of hard removal).  
‚Ä¢ Totally responsive: tiles in a masonry grid on desktop, single-column feed on mobile.

# TECH STACK / CONSTRAINTS
‚Ä¢ Keep everything inside my existing `/app` folder structure.  
‚Ä¢ Front-end: vanilla JS + modular ES6 imports (NO frameworks) OR React if the rest of the app already uses React. Detect and match automatically.  
‚Ä¢ Backend: Firebase (v10+ modular SDK). Use the already-initialised `firebaseApp`.  
‚Ä¢ Image uploads: reuse my current R2 / Firebase Storage helper (expects `uploadImage(file, path)` ‚Üí returns downloadURL).  
‚Ä¢ Database: Cloud Firestore, rules locked to current user for writes.  
‚Ä¢ UI kit: use existing Tailwind setup; otherwise generate minimal BEM CSS classes.  
‚Ä¢ Keep code style consistent with the existing project (arrow functions, Prettier defaults).

# FILE / FOLDER STRUCTURE
1. **/src/community/**
   ‚Ä¢ community.html               ‚Äì page shell, imports CSS + JS.  
   ‚Ä¢ community.js                 ‚Äì top-level controller: auth check, loadFeed(), handleNewPost().  
   ‚Ä¢ postCard.js                  ‚Äì renders single post + listeners for like / comment buttons.  
   ‚Ä¢ commentDrawer.js             ‚Äì renders & manages live comments for a given post.  
   ‚Ä¢ newPostModal.js              ‚Äì image-chooser, caption field, progress bar, submit.  
   ‚Ä¢ community.css                ‚Äì only styles unique to community (masonry grid etc.).

2. **/src/firebase/**  
   ‚Ä¢ communityApi.js              ‚Äì CRUD helpers for posts, likes, comments.

3. **/functions/** (only if Cloud Functions enabled)  
   ‚Ä¢ onPostDelete.cjs             ‚Äì cleans up Storage & subcollections when a post is soft-deleted.

# DATABASE SCHEMA
‚Ä¢ Collection: `community_posts`
  - id (docId)          ‚Äì auto  
  - uid                 ‚Äì poster uid  
  - displayName         ‚Äì from auth  
  - photoURL            ‚Äì avatar  
  - imageUrl            ‚Äì storage URL  
  - caption             ‚Äì string (‚â§ 300 chars)  
  - month               ‚Äì ‚Äú2025-08‚Äù (YYYY-MM, for querying)  
  - createdAt           ‚Äì serverTimestamp()  
  - likeCount           ‚Äì integer (incremented via transaction)  
  - isDeleted           ‚Äì bool, default false

‚Ä¢ Subcollection on each post: `likes`  
  - docId == liker uid ‚Üí { createdAt }

‚Ä¢ Subcollection on each post: `comments`
  - id (docId)          ‚Äì auto  
  - uid                 ‚Äì commenter uid  
  - displayName         ‚Äì commenter  
  - text                ‚Äì string (‚â§ 500)  
  - createdAt           ‚Äì serverTimestamp()  
  - isDeleted           ‚Äì bool

# SECURITY RULES (Firestore)
match /community_posts/{postId} {
  allow read: if true;
  allow create: if request.auth != null;
  allow update, delete: if request.auth != null && request.auth.uid == resource.data.uid;
  match /likes/{likeId} {
    allow read: if true;
    allow create: if request.auth != null && request.auth.uid == likeId;
    allow delete: if request.auth != null && request.auth.uid == likeId;
  }
  match /comments/{commentId} {
    allow read: if true;
    allow create: if request.auth != null;
    allow update, delete: if request.auth != null && request.auth.uid == resource.data.uid;
  }
}

# FRONT-END BEHAVIOUR DETAILS
1. **Feed Loading**
   ‚Ä¢ Default view = current month.  
   ‚Ä¢ Dropdown lets user jump to previous months (list distinct `month` values, newest first).  
   ‚Ä¢ Query: `collection('community_posts').where('month', '==', selectedMonth).orderBy('createdAt', 'desc')`.  
   ‚Ä¢ Attach `onSnapshot` for live updates.

2. **New Post Flow**
   ‚Ä¢ ‚ÄúShare a Pose‚Äù floating button ‚Üí opens `newPostModal`.  
   ‚Ä¢ Accepts image (jpg/png, ‚â§ 10 MB); show preview.  
   ‚Ä¢ On submit:  
     ‚Äì Upload image to `/community/{uid}/{timestamp}.jpg`.  
     ‚Äì Create post doc with downloadURL, caption, month = YYYY-MM.  
     ‚Äì Close modal & scroll feed to top.

3. **Likings**
   ‚Ä¢ Optimistic UI: toggle heart instantly, then upsert / delete like doc in subcollection with batched write & increment/decrement likeCount on the parent post in a transaction.

4. **Comments Drawer**
   ‚Ä¢ Lazy-load comments subcollection on first open with `orderBy('createdAt')`.  
   ‚Ä¢ Real-time listener for new comments.  
   ‚Ä¢ Auto-scroll to newest.  
   ‚Ä¢ Allow commenter to long-press (mobile) or click kebab menu (desktop) to delete own comment (sets isDeleted = true; UI hides it).

# UI / UX NOTES
‚Ä¢ Use CSS grid with `grid-auto-rows: masonry;` polyfill fallback for browsers without masonry layout.  
‚Ä¢ Heart icon turns solid red when liked; number animates with a small scale-up.  
‚Ä¢ Comment icon shows existing count; when drawer open, icon remains highlighted.  
‚Ä¢ On very small screens (‚â§ 420 px) collapse captions under a ‚Äú‚ãØ‚Äù toggle to save space.  
‚Ä¢ Display friendly timestamps (‚Äú2 h ago‚Äù, ‚ÄúJul 31‚Äù). Use `date-fns` if already installed; otherwise provide a tiny helper.

# BUILD & DEPLOY
‚Ä¢ Add route `/community` to existing router (or side-nav) linking to community.html.  
‚Ä¢ Update service worker (if present) to cache community assets.  
‚Ä¢ Include new Firestore index suggestion if composite index required (likes sorting, etc.).  
‚Ä¢ Run `npm run format` at the end.

# TESTS / CI
‚Ä¢ Unit tests with Jest for communityApi helpers (createPost, toggleLike, addComment).  
‚Ä¢ Cypress (if available) e2e: login ‚Üí create post ‚Üí like ‚Üí comment ‚Üí delete comment.  
‚Ä¢ Lint gate must pass.

# DELIVERABLE SUMMARY
‚Ä¢ All files listed above created & integrated.  
‚Ä¢ App compiles without TypeScript errors (if TS project) or ESLint errors.  
‚Ä¢ Full Community module visible at `/community`, ready for production.

# START NOW
Generate every file, inject into repo, then display a commit diff summary.
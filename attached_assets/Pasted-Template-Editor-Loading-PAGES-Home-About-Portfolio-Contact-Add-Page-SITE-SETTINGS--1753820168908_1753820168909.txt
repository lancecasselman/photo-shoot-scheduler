Template Editor
Loading...
PAGES

🏠
Home
👤
About
📸
Portfolio
📧
Contact
➕
Add Page
SITE SETTINGS

⚙️
Site Information
🎨
Branding
📝
Content
☰ Menu
💻 Desktop
📱 Tablet
📱 Mobile
Save
Publish
⚙️ Settings

`; iframe.srcdoc = enhancedHTML; console.log('✅ Enhanced interactive preview loaded for page:', page); } // Show a simple preview when all else fails function showSimplePreview() { console.log('📄 Showing simple preview fallback'); const iframe = document.getElementById('preview-iframe'); if (iframe) { const simpleHTML = `
${currentTemplate ? currentTemplate.name : 'Template Preview'}
Page: ${currentPage}
Template editor is loading...
`; iframe.srcdoc = simpleHTML; console.log('✅ Simple preview loaded'); } } function getCustomizations() { return { siteTitle: document.getElementById('site-title').value || currentTemplate.name, tagline: document.getElementById('site-tagline').value || currentTemplate.description, photographerName: document.getElementById('photographer-name').value || 'Your Name', email: document.getElementById('contact-email').value || 'hello@yoursite.com', phone: document.getElementById('contact-phone').value || '+1 (555) 123-4567', colors: { primary: document.getElementById('primary-color').value, secondary: document.getElementById('secondary-color').value, accent: document.getElementById('accent-color').value }, fonts: { heading: document.getElementById('heading-font').value, body: document.getElementById('body-font').value }, content: { heroTitle: document.getElementById('hero-title').value, heroSubtitle: document.getElementById('hero-subtitle').value, aboutText: document.getElementById('about-text').value, heroImage: document.getElementById('hero-image').value } }; } function applyCustomizations(template, customizations) { const customized = JSON.parse(JSON.stringify(template)); // Deep clone // Apply color customizations if (customizations.colors) { customized.colors = { ...customized.colors, ...customizations.colors }; } // Apply font customizations if (customizations.fonts) { customized.fonts = { ...customized.fonts, ...customizations.fonts }; } // Apply content customizations if (customizations.content) { if (customized.structure.home.hero) { if (customizations.content.heroTitle) { customized.structure.home.hero.title = customizations.content.heroTitle; } if (customizations.content.heroSubtitle) { customized.structure.home.hero.subtitle = customizations.content.heroSubtitle; } if (customizations.content.heroImage) { customized.structure.home.hero.background = customizations.content.heroImage; } } if (customized.structure.home.about && customizations.content.aboutText) { customized.structure.home.about.content = customizations.content.aboutText; } } return customized; } function updatePreviewDevice() { const iframe = document.getElementById('preview-iframe'); iframe.className = `preview-iframe ${currentDevice}`; } function updateFontPreview() { const headingFont = document.getElementById('heading-font').value; const bodyFont = document.getElementById('body-font').value; const preview = document.getElementById('font-preview'); preview.style.setProperty('--heading-font', headingFont); preview.style.setProperty('--body-font', bodyFont); updatePreview(); } function showPanel(panelId) { console.log('🎛️ Switching to panel:', panelId); // Hide all panels document.querySelectorAll('.controls-section').forEach(panel => { panel.classList.remove('active'); panel.style.display = 'none'; }); // Show the selected panel const targetPanel = document.getElementById(panelId + '-panel'); if (targetPanel) { targetPanel.classList.add('active'); targetPanel.style.display = 'block'; console.log('✅ Panel activated:', panelId); } else { console.error('❌ Panel not found:', panelId + '-panel'); } } async function saveTemplate() { try { showLoading(true, 'Saving...'); const customizations = getCustomizations(); await window.templateLoader.saveTemplateSelection(templateId, customizations); showMessage('Template saved successfully!', 'success'); showLoading(false); } catch (error) { console.error('Error saving template:', error); showMessage('Error saving template. Please try again.', 'error'); showLoading(false); } } async function publishSite() { try { showLoading(true, 'Publishing...'); const customizations = getCustomizations(); const customizedTemplate = applyCustomizations(currentTemplate, customizations); const html = window.templateLoader.generateTemplateHTML(customizedTemplate, 'home'); // Here you would integrate with Firebase Hosting or your publishing system console.log('Publishing HTML:', html); showMessage('Site published successfully!', 'success'); showLoading(false); // Show publish success dialog with site URL setTimeout(() => { alert('Your site has been published! You can view it at: https://your-site-url.com'); }, 1000); } catch (error) { console.error('Error publishing site:', error); showMessage('Error publishing site. Please try again.', 'error'); showLoading(false); } } async function loadSavedCustomizations() { try { const saved = await window.templateLoader.loadSavedTemplate(); if (saved && saved.templateId === templateId) { // Apply saved customizations to form fields if (saved.customizations) { const c = saved.customizations; if (c.siteTitle) document.getElementById('site-title').value = c.siteTitle; if (c.tagline) document.getElementById('site-tagline').value = c.tagline; if (c.photographerName) document.getElementById('photographer-name').value = c.photographerName; if (c.email) document.getElementById('contact-email').value = c.email; if (c.phone) document.getElementById('contact-phone').value = c.phone; if (c.colors) { if (c.colors.primary) document.getElementById('primary-color').value = c.colors.primary; if (c.colors.secondary) document.getElementById('secondary-color').value = c.colors.secondary; if (c.colors.accent) document.getElementById('accent-color').value = c.colors.accent; } if (c.fonts) { if (c.fonts.heading) document.getElementById('heading-font').value = c.fonts.heading; if (c.fonts.body) document.getElementById('body-font').value = c.fonts.body; } if (c.content) { if (c.content.heroTitle) document.getElementById('hero-title').value = c.content.heroTitle; if (c.content.heroSubtitle) document.getElementById('hero-subtitle').value = c.content.heroSubtitle; if (c.content.aboutText) document.getElementById('about-text').value = c.content.aboutText; if (c.content.heroImage) document.getElementById('hero-image').value = c.content.heroImage; } updateFontPreview(); } } } catch (error) { console.error('Error loading saved customizations:', error); } } function showLoading(show, message = 'Loading...') { console.log('⏳ Loading overlay:', show ? 'show' : 'hide', message); const overlay = document.getElementById('loading-overlay'); if (!overlay) { console.error('❌ Loading overlay element not found'); return; } if (show) { const messageElement = overlay.querySelector('.loading-content div:last-child'); if (messageElement) { messageElement.textContent = message; } overlay.classList.remove('hidden'); } else { overlay.classList.add('hidden'); } } function showMessage(message, type = 'info') { console.log(`📢 Message (${type}):`, message); // Create a temporary message overlay const messageDiv = document.createElement('div'); messageDiv.style.cssText = ` position: fixed; top: 20px; right: 20px; background: ${type === 'success' ? '#28a745' : type === 'error' ? '#dc3545' : '#007bff'}; color: white; padding: 15px 20px; border-radius: 5px; z-index: 10001; font-size: 0.9rem; max-width: 300px; box-shadow: 0 4px 12px rgba(0,0,0,0.3); `; messageDiv.textContent = message; document.body.appendChild(messageDiv); // Remove after 3 seconds setTimeout(() => { if (messageDiv.parentNode) { messageDiv.parentNode.removeChild(messageDiv); } }, 3000); } function debounce(func, wait) { let timeout; return function executedFunction(...args) { const later = () => { clearTimeout(timeout); func(...args); }; clearTimeout(timeout); timeout = setTimeout(later, wait); }; } // Page Management Functions function addNewPage() { const pageName = prompt('Enter page name (e.g., "services", "pricing", "blog"):'); if (!pageName) return; const cleanPageName = pageName.toLowerCase().replace(/[^a-z0-9]/g, ''); if (!cleanPageName) { alert('Please enter a valid page name with letters and numbers only.'); return; } // Check if page already exists if (currentTemplate.structure[cleanPageName]) { alert('A page with this name already exists.'); return; } // Add new page to template structure currentTemplate.structure[cleanPageName] = { title: pageName.charAt(0).toUpperCase() + pageName.slice(1), subtitle: 'New page content goes here', content: { title: 'Welcome to ' + pageName.charAt(0).toUpperCase() + pageName.slice(1), text: 'This is your new page. Click on any text to edit it.' } }; // Add page navigation item addPageNavItem(cleanPageName, pageName); // Switch to new page currentPage = cleanPageName; updatePreview(); // Update navigation document.querySelectorAll('.nav-item[data-page]').forEach(i => i.classList.remove('active')); document.querySelector(`[data-page="${cleanPageName}"]`).classList.add('active'); showMessage('New page "' + pageName + '" added successfully!', 'success'); } function addPageNavItem(pageKey, pageName) { const pagesSection = document.querySelector('.sidebar-section h3').parentElement; const addButton = pagesSection.querySelector('.add-page-btn'); const pageItem = document.createElement('div'); pageItem.className = 'nav-item'; pageItem.setAttribute('data-page', pageKey); pageItem.innerHTML = `
📄
${pageName.charAt(0).toUpperCase() + pageName.slice(1)}
`; // Add click handler pageItem.addEventListener('click', function() { document.querySelectorAll('.nav-item[data-page]').forEach(i => i.classList.remove('active')); this.classList.add('active'); currentPage = this.dataset.page; updatePreview(); }); // Insert before add button pagesSection.insertBefore(pageItem, addButton); } // Content editing functions function updateElementContent() { const elementId = document.getElementById('element-id').value; const newValue = document.getElementById('element-value').value; if (!elementId || !newValue) return; // Update the element in the iframe const iframe = document.getElementById('preview-iframe'); if (iframe && iframe.contentDocument) { const element = iframe.contentDocument.querySelector(`[data-edit-id="${elementId}"]`); if (element) { element.textContent = newValue; console.log('✅ Updated element content:', elementId, newValue); } } } function updateTextColor() { const elementId = document.getElementById('element-id').value; const color = document.getElementById('text-color').value; if (!elementId) return; const iframe = document.getElementById('preview-iframe'); if (iframe && iframe.contentDocument) { const element = iframe.contentDocument.querySelector(`[data-edit-id="${elementId}"]`); if (element) { element.style.color = color; console.log('✅ Updated text color:', elementId, color); } } } function updateFontSize() { const elementId = document.getElementById('element-id').value; const fontSize = document.getElementById('font-size').value; if (!elementId) return; const iframe = document.getElementById('preview-iframe'); if (iframe && iframe.contentDocument) { const element = iframe.contentDocument.querySelector(`[data-edit-id="${elementId}"]`); if (element) { element.style.fontSize = fontSize; console.log('✅ Updated font size:', elementId, fontSize); } } } function updateFontWeight() { const elementId = document.getElementById('element-id').value; const fontWeight = document.getElementById('font-weight').value; if (!elementId) return; const iframe = document.getElementById('preview-iframe'); if (iframe && iframe.contentDocument) { const element = iframe.contentDocument.querySelector(`[data-edit-id="${elementId}"]`); if (element) { element.style.fontWeight = fontWeight; console.log('✅ Updated font weight:', elementId, fontWeight); } } } function handleImageUpload() { const fileInput = document.getElementById('image-upload'); const elementId = document.getElementById('element-id').value; if (!fileInput.files[0] || !elementId) return; const file = fileInput.files[0]; const reader = new FileReader(); reader.onload = function(e) { const iframe = document.getElementById('preview-iframe'); if (iframe && iframe.contentDocument) { const element = iframe.contentDocument.querySelector(`[data-edit-id="${elementId}"]`); if (element && element.tagName === 'IMG') { element.src = e.target.result; console.log('✅ Updated image:', elementId); showMessage('Image updated successfully!', 'success'); } } }; reader.readAsDataURL(file); } // Background color functionality document.getElementById('background-color').addEventListener('change', function() { const color = this.value; const iframe = document.getElementById('preview-iframe'); if (iframe && iframe.contentDocument) { iframe.contentDocument.body.style.backgroundColor = color; console.log('✅ Updated background color:', color); } }); // Initialize message handling for preview renderer window.addEventListener('message', function(event) { if (event.data.type === 'elementClicked') { console.log('🎛️ Switching to panel:', 'content'); showPanel('content'); // Update content form with element data const elementIdField = document.getElementById('element-id'); const elementTypeField = document.getElementById('element-type'); const elementValueField = document.getElementById('element-value'); const textEditor = document.getElementById('text-editor'); const imageEditor = document.getElementById('image-editor'); if (elementIdField) elementIdField.value = event.data.elementId || ''; if (elementTypeField) elementTypeField.value = event.data.elementType || ''; // Show appropriate editor based on element type if (event.data.elementType === 'text') { textEditor.style.display = 'block'; imageEditor.style.display = 'none'; if (elementValueField) { elementValueField.value = event.data.currentValue || ''; elementValueField.focus(); } } else if (event.data.elementType === 'image') { textEditor.style.display = 'none'; imageEditor.style.display = 'block'; } else { textEditor.style.display = 'none'; imageEditor.style.display = 'none'; } } else if (event.data.type === 'pageChanged') { // Handle page navigation from within preview const newPage = event.data.page; currentPage = newPage; // Update sidebar navigation document.querySelectorAll('.nav-item[data-page]').forEach(i => i.classList.remove('active')); const activeNav = document.querySelector(`[data-page="${newPage}"]`); if (activeNav) activeNav.classList.add('active'); // Update preview updatePreview(); } });